#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>

Adafruit_PWMServoDriver myServo = Adafruit_PWMServoDriver();

#define SERVOMIN 150
#define SERVOMAX 600
#define ed "\n"
#define pie 3.14159
#define STOP 20
#define MEX 18
#define MIIN -8

//ANGLE FOR EACH
#define TR_B 50
#define TR_A 35
#define TR_C 70

#define BR_B 55
#define BR_A 25
#define BR_C 55

#define BL_B 55 //55
#define BL_A 100
#define BL_C 80

#define TL_B 45
#define TL_A 95
#define TL_C 115

float a=130.0,b,c=130.0,A,B,C;

uint8_t servonum = 0;

void setup() {
  Serial.begin(9600);
  myServo.begin();
  myServo.setPWMFreq(60);
  delay(10);
}

void loop() { 
   pushup();
//    equilibrium();
//   movefront();
}

void hpush(int x){
     //TOPRIGHT
  myServo.setPWM(0, 0, angleToPulse(TR_B +x));//B
  myServo.setPWM(1, 0, angleToPulse(TR_A -x)); //A
  myServo.setPWM(2, 0, angleToPulse(TR_C));//C

  //top left
  myServo.setPWM(12, 0, angleToPulse(TL_B -x));//B
  myServo.setPWM(13, 0, angleToPulse(TL_A +x));//A
  myServo.setPWM(14, 0, angleToPulse(TL_C));//C

  //BOTTOMRIGHT // correct
  myServo.setPWM(4, 0, angleToPulse(BR_B -x));//B
  myServo.setPWM(5, 0, angleToPulse(BR_A +x));//A
  myServo.setPWM(6, 0, angleToPulse(BR_C));//C

  
  //bottomleft
  myServo.setPWM(8, 0, angleToPulse(BL_B +x));//B
  myServo.setPWM(9, 0, angleToPulse(BL_A -x));//A
  myServo.setPWM(10, 0, angleToPulse(BL_C));//C

  
}

void pushup(){
   for(float i=MIIN;i<MEX;i++){  
     delay(50);
     pushup1(i);
  }
  for(float i=MEX;i>MIIN;i--){
     delay(50);
     pushup1(i);
  }
}

void pushup1(int x){
  //TOPRIGHT
  myServo.setPWM(0, 0, angleToPulse(TR_B +x));//B
  myServo.setPWM(1, 0, angleToPulse(TR_A -x)); //A
  myServo.setPWM(2, 0, angleToPulse(TR_C));//C

  //BOTTOMRIGHT // correct
  myServo.setPWM(4, 0, angleToPulse(BR_B +x));//B
  myServo.setPWM(5, 0, angleToPulse(BR_A -x));//A
  myServo.setPWM(6, 0, angleToPulse(BR_C));//C

  
  //bottomleft
  myServo.setPWM(8, 0, angleToPulse(BL_B -x));//B
  myServo.setPWM(9, 0, angleToPulse(BL_A +x));//A
  myServo.setPWM(10, 0, angleToPulse(BL_C));//C

  
  //top left
  myServo.setPWM(12, 0, angleToPulse(TL_B -x));//B
  myServo.setPWM(13, 0, angleToPulse(TL_A +x));//A
  myServo.setPWM(14, 0, angleToPulse(TL_C));//C
  
}
void equilibrium(){
    pushup1(0);
}

void movefront(){
  //top left
  myServo.setPWM(12, 0, angleToPulse(TL_B-15));//B
  myServo.setPWM(13, 0, angleToPulse(TL_A));//A
  myServo.setPWM(14, 0, angleToPulse(TL_C));//C
  delay(500);
  myServo.setPWM(12, 0, angleToPulse(TL_B-15));//B
  myServo.setPWM(13, 0, angleToPulse(TL_A-15));//A
  myServo.setPWM(14, 0, angleToPulse(TL_C));//C
  delay(500);
  movethree();
  myServo.setPWM(12, 0, angleToPulse(TL_B));//B
  myServo.setPWM(13, 0, angleToPulse(TL_A+15));//A
  myServo.setPWM(14, 0, angleToPulse(TL_C));//C
  delay(500);
  myServo.setPWM(12, 0, angleToPulse(TL_B));//B
  myServo.setPWM(13, 0, angleToPulse(TL_A));//A
  myServo.setPWM(14, 0, angleToPulse(TL_C));//C
  delay(500);
  //TOPRIGHT
  myServo.setPWM(0, 0, angleToPulse(TR_B -15));//B
  myServo.setPWM(1, 0, angleToPulse(TR_A )); //A
  myServo.setPWM(2, 0, angleToPulse(TR_C));//C
  delay(500);
  myServo.setPWM(0, 0, angleToPulse(TR_B -15));//B
  myServo.setPWM(1, 0, angleToPulse(TR_A -15)); //A
  myServo.setPWM(2, 0, angleToPulse(TR_C));//C
  delay(500);
  movethree2();
  myServo.setPWM(0, 0, angleToPulse(TR_B ));//B
  myServo.setPWM(1, 0, angleToPulse(TR_A +15)); //A
  myServo.setPWM(2, 0, angleToPulse(TR_C));//C
  delay(500);
  myServo.setPWM(0, 0, angleToPulse(TR_B ));//B
  myServo.setPWM(1, 0, angleToPulse(TR_A)); //A
  myServo.setPWM(2, 0, angleToPulse(TR_C));//C
  delay(500);
}
void movethree(){
  for(int x=-15;x<=15;x+=15){
    myServo.setPWM(0, 0, angleToPulse(TR_B));//B
  myServo.setPWM(1, 0, angleToPulse(TR_A -x)); //A
  myServo.setPWM(2, 0, angleToPulse(TR_C));//C
  //BOTTOMRIGHT // correct
  myServo.setPWM(4, 0, angleToPulse(BR_B));//B
  myServo.setPWM(5, 0, angleToPulse(BR_A -x));//A
  myServo.setPWM(6, 0, angleToPulse(BR_C));//C
  
  //bottomleft
  myServo.setPWM(8, 0, angleToPulse(BL_B));//B
  myServo.setPWM(9, 0, angleToPulse(BL_A +x));//A
  myServo.setPWM(10, 0, angleToPulse(BL_C));//C
  delay(500);
  }
}
void movethree2(){
  for(int x=-15;x<=15;x+=15){
  //BOTTOMRIGHT // correct
  myServo.setPWM(4, 0, angleToPulse(BR_B ));//B
  myServo.setPWM(5, 0, angleToPulse(BR_A -x));//A
  myServo.setPWM(6, 0, angleToPulse(BR_C));//C

  
  //bottomleft
  myServo.setPWM(8, 0, angleToPulse(BL_B));//B
  myServo.setPWM(9, 0, angleToPulse(BL_A +x));//A
  myServo.setPWM(10, 0, angleToPulse(BL_C));//C

  
  //top left
  myServo.setPWM(12, 0, angleToPulse(TL_B));//B
  myServo.setPWM(13, 0, angleToPulse(TL_A +x));//A
  myServo.setPWM(14, 0, angleToPulse(TL_C));//C
  }
}
void hpushup(){
  
}
int angleToPulse(int ang){
   int pulse = map(ang,0, 180, SERVOMIN,SERVOMAX);// map angle of 0 to 180 to Servo min and Servo max 
   return pulse;
}

float getdegree(float r){
    return r*(180.0/pie);
}

void setangle(float side){
    b=side;//COSINE RULE 

    A=acos((pow(c,2)+pow(b,2)-pow(a,2))/(2*c*b));
    A=getdegree(A);
    A=floor(A)+70;

    B=acos((pow(a,2)+pow(c,2)-pow(b,2))/(2*a*c));
    B=getdegree(B);
    B=B/2+30;

    C=140;
}
